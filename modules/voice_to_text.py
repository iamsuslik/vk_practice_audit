import speech_recognition as sr
import logging

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)

class VoiceToText:
    def __init__(self):
        self.recognizer = sr.Recognizer()
        try:
            self.microphone = sr.Microphone()
            logging.info("‚úÖ –ú–∏–∫—Ä–æ—Ñ–æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω")
        except Exception as e:
            logging.error(f"‚ùå –ú–∏–∫—Ä–æ—Ñ–æ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            self.microphone = None

    def transcribe_audio(self, file_path):
        try:
            with sr.AudioFile(file_path) as source:
                audio = self.recognizer.record(source)
                text = self.recognizer.recognize_google(audio, language="ru-RU")
                logging.info(f"üîä –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {text}")
                return text
        except sr.UnknownValueError:
            logging.error("‚ùå –†–µ—á—å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ (–Ω–µ—Ä–∞–∑–±–æ—Ä—á–∏–≤–æ –∏–ª–∏ —Ç–∏—Ö–æ)")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
        return None


if __name__ == "__main__":
    vtt = VoiceToText()

    result = vtt.transcribe_audio("test_audio.wav")
    if result:
        print("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:", result)
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å")